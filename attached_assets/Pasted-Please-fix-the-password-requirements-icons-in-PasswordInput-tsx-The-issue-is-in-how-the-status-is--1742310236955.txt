Please fix the password requirements icons in PasswordInput.tsx:

The issue is in how the status is evaluated and displayed. Currently, the requirements check marks aren't displaying correctly. Make the following changes:

1. In the existing code, you're correctly defining and tracking requirement states:
   ```js
   const requirements = [
     { key: "length", text: "At least 8 characters", met: lengthValid },
     { key: "uppercase", text: "At least one uppercase letter", met: uppercaseValid },
     { key: "number", text: "At least one number", met: numberValid },
     { key: "special", text: "At least one special character", met: specialValid }
   ].map(req => ({
     ...req,
     status: !hasValue ? 'neutral' : req.met ? 'valid' : 'invalid'
   }));

The issue appears to be in the rendering section. Make sure lucide-react is properly imported at the top:
jsxCopyimport { Eye, EyeOff, Check, X } from "lucide-react";

Replace the existing requirements rendering section with this code to ensure proper icon display:
jsxCopy{/* Password requirements section */}
{showRequirements && (
  <div className="mt-2 text-xs rounded-md p-2 bg-gray-50">
    <p className="font-medium text-sm mb-1 text-gray-600">Password requirements:</p>
    <ul className="space-y-1 pl-0.5">
      {requirements.map((requirement) => (
        <li key={requirement.key} className="flex items-center gap-1.5">
          {requirement.status === 'valid' ? (
            <Check size={14} className="text-green-600" />
          ) : requirement.status === 'invalid' ? (
            <X size={14} className="text-red-500" />
          ) : (
            <div className="w-3.5 h-3.5 flex items-center justify-center text-gray-400">
              <X size={14} />
            </div>
          )}
          <span className={
            requirement.status === 'valid' ? "text-green-700" : 
            requirement.status === 'invalid' ? "text-red-500" :
            "text-gray-500"
          }>
            {requirement.text}
          </span>
        </li>
      ))}
    </ul>
  </div>
)}