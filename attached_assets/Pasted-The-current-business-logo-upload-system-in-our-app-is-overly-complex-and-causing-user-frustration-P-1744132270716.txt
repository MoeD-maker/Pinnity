The current business logo upload system in our app is overly complex and causing user frustration. Please implement a simplified approach that focuses on user experience rather than technical controls.

## Current Issues
- The image upload process in `ImageUploadWithCropper.tsx` and `ImageCropper.tsx` is overly complex
- Users are overwhelmed with technical controls (three tabs: crop, enhance, preview)
- Too many warnings and stats about dimensions, file sizes, compression rates
- Multiple fallback methods suggest reliability issues
- The entire experience feels like using Photoshop when it should be simple

## Required Changes

1. Replace the current implementation with a much simpler approach:

```jsx
// In profile.tsx, replace the ImageUploadWithCropper component with this:
<BusinessLogoUpload
  currentImage={previewUrl}
  onImageChange={(fileOrBase64) => {
    if (fileOrBase64) {
      // If it's a File object
      if (fileOrBase64 instanceof File) {
        setSelectedFile(fileOrBase64);
        // Create preview URL
        const reader = new FileReader();
        reader.onload = () => setPreviewUrl(reader.result as string);
        reader.readAsDataURL(fileOrBase64);
      } else {
        // It's already a base64 string
        setPreviewUrl(fileOrBase64);
        // Convert base64 to File if needed for API
        // This conversion can happen here or server-side
      }
    } else {
      setSelectedFile(null);
      setPreviewUrl(null);
    }
  }}
/>

Create a new BusinessLogoUpload.tsx component:

jsxCopyimport React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Upload, Edit2, X } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogContent, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import Avatar from 'react-avatar-editor'; // Add this dependency

interface BusinessLogoUploadProps {
  currentImage: string | null;
  onImageChange: (fileOrBase64: File | string | null) => void;
}

export default function BusinessLogoUpload({ currentImage, onImageChange }: BusinessLogoUploadProps) {
  const [previewUrl, setPreviewUrl] = useState<string | null>(currentImage);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [cropperOpen, setCropperOpen] = useState<boolean>(false);
  const [zoom, setZoom] = useState<number>(1);
  const [uploading, setUploading] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const editorRef = useRef<any>(null);
  const { toast } = useToast();

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      
      // Simple validation
      if (file.size > 5 * 1024 * 1024) {
        toast({
          title: "File too large",
          description: "Please select an image under 5MB",
          variant: "destructive"
        });
        return;
      }
      
      // Set file and show cropper
      setSelectedFile(file);
      
      // Preview immediately for user feedback
      const reader = new FileReader();
      reader.onload = () => {
        setPreviewUrl(reader.result as string);
        setCropperOpen(true); // Open cropper dialog
      };
      reader.readAsDataURL(file);
    }
  };
  
  const handleCropComplete = () => {
    if (editorRef.current) {
      setUploading(true);
      
      // Get canvas data from the editor
      const canvasScaled = editorRef.current.getImageScaledToCanvas();
      const croppedImage = canvasScaled.toDataURL('image/jpeg', 0.9);
      
      // Pass the cropped image back to parent
      onImageChange(croppedImage);
      
      // Close dialog and reset states
      setCropperOpen(false);
      setUploading(false);
    }
  };
  
  const handleRemoveImage = () => {
    setPreviewUrl(null);
    setSelectedFile(null);
    onImageChange(null);
  };
  
  return (
    <div className="space-y-4">
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="image/jpeg,image/png,image/gif"
        className="hidden"
      />
      
      {previewUrl ? (
        <div className="relative group">
          <img 
            src={previewUrl} 
            alt="Business logo" 
            className="w-40 h-40 object-cover rounded-md border" 
          />
          <div className="absolute inset-0 bg-black/0 group-hover:bg-black/40 transition-all flex items-center justify-center gap-2 opacity-0 group-hover:opacity-100">
            <Button 
              size="icon" 
              variant="secondary"
              onClick={() => fileInputRef.current?.click()}
            >
              <Edit2 className="h-4 w-4" />
            </Button>
            <Button 
              size="icon" 
              variant="destructive"
              onClick={handleRemoveImage}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>
      ) : (
        <Button 
          onClick={() => fileInputRef.current?.click()} 
          className="w-full h-40 border-dashed border-2 flex flex-col items-center justify-center bg-muted/30 hover:bg-muted/50"
          variant="outline"
        >
          <Upload className="h-8 w-8 mb-2 text-muted-foreground" />
          <span className="text-sm font-medium">Upload Business Logo</span>
          <span className="text-xs text-muted-foreground mt-1">
            JPG, PNG or GIF (max. 5MB)
          </span>
        </Button>
      )}
      
      <Dialog open={cropperOpen} onOpenChange={setCropperOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogTitle>Adjust Your Logo</DialogTitle>
          
          <div className="mt-4 flex flex-col items-center">
            {selectedFile && (
              <Avatar
                ref={editorRef}
                image={URL.createObjectURL(selectedFile)}
                width={250}
                height={250}
                border={50}
                color={[255, 255, 255, 0.6]} // RGBA
                scale={zoom}
                borderRadius={100} // Make it round
              />
            )}
            
            <div className="w-full mt-4">
              <label className="text-sm mb-2 block">Zoom</label>
              <input
                type="range"
                min="1"
                max="3"
                step="0.1"
                value={zoom}
                onChange={(e) => setZoom(parseFloat(e.target.value))}
                className="w-full"
              />
            </div>
          </div>
          
          <DialogFooter className="mt-4">
            <Button variant="outline" onClick={() => setCropperOpen(false)}>
              Cancel
            </Button>
            <Button 
              onClick={handleCropComplete}
              disabled={uploading}
            >
              {uploading ? "Processing..." : "Save Logo"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

Update the API layer to handle direct file uploads (if you want it done properly):

typescriptCopy// Make an API function that accepts a File
export async function uploadBusinessLogo(businessId: number, logoFile: File) {
  // Create form data with the file
  const formData = new FormData();
  formData.append('logo', logoFile);
  
  return apiRequest(`/api/business/${businessId}/logo`, {
    method: 'POST',
    body: formData,
    // Don't set Content-Type, it gets set automatically with boundaries
  });
}

Install dependencies:

npm install react-avatar-editor



Key improvements

The UI is dramatically simplified - one simple upload button and minimal controls
The cropper is optional and only has zoom (no rotation, brightness, constrast, etc.)
File processing happens on the server (or can be simplified client-side)
User gets immediate feedback with clear preview instead of technical warnings
The entire UX feels like a standard photo upload, not a complex photo editor